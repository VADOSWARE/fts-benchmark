/* global process */
import { createPool, sql } from "slonik";

async function buildPool() {
  if (!process.env.PG_URL) {
    throw new Error(`[error] Missing/invalid Postgres URL connection [${process.env.PG_URL}] (did you specify PG_URL?)`);
  }

  const pool = await createPool(process.env.PG_URL);

  // Set up the initial table
  await pool.query(sql`
CREATE TABLE IF NOT EXISTS movies (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  title text NOT NULL,
  original_title text NOT NULL,
  tagline text,
  overview text NOT NULL,
  released_at timestamptz NOT NULL,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  fts_doc_en tsvector GENERATED ALWAYS AS (to_tsvector('english', title || ' ' || original_title || ' ' || overview || ' ' )) STORED
);

CREATE INDEX IF NOT EXISTS movies_fts_doc_en_idx ON movies USING GIN (fts_doc_en);
`);

  if (process.env.FTS_ENGINE_RESET_AT_INIT) {
    await pool.query(`TRUNCATE TABLE movies`);
  }

  return pool;
}

export async function build() {
  const pool = await buildPool();

  return {

    // Ingesting search documents
    async ingest({ document }) {
      try {
        // Ignore rows without proper release dates
        if (document.release_date.trim().length === 0) {
          if (process.env.DEBUG) {
            process.stderr.write(`[error] invalid release date for doc: [${document.id}]`);
          }
          return;
        }

        await pool.query(sql`
INSERT into movies
  (id, title, original_title, overview, released_at)
VALUES
  (${document.id}, ${document.title}, ${document.original_title}, ${document.overview}, ${new Date(document.release_date).toISOString()}::timestamptz)
ON CONFLICT (id) DO UPDATE SET
    title=${document.title}
  , original_title=${document.original_title}
  , overview=${document.overview}
  , released_at=${new Date(document.release_date).toISOString()}::timestamptz
;
`);
      } catch (err) {
        if (process.env.DEBUG) {
          process.stderr.write(`[error] failed to ingest document:\n ${JSON.stringify(document, null, 2)}`);
        }
        throw err;
      }
    },

    // Querying search phrases
    async query({ phrase }) {
      const results = await pool.query(sql`
SELECT id, title
FROM movies
WHERE fts_doc_en @@ websearch_to_tsquery('english', ${phrase}::text)
`);

      const ids = results.rows.map(r => r.id);
      if (process.env.DEBUG) {
        process.stderr.write(`[debug] Search for [${phrase}] returned [${ids.length}] ids\n`);
      }

      return { ids };
    },
  };
}
